#ifndef CONTROL_H
#define CONTROL_H

#include "systemc.h"
#include "common.h"
#include "values.h"
#include<stdlib.h>
#include<time.h>



// addresses list
char direccionesA[] = {2, 6, 3, 2, 5, 3, 6, 4, 2, 2, 6, 0, 3, 0, 4, 6, 7, 7, 2, 5, 2, 3, 5, 3, 0, 0, 3, 4, 0, 5, 6, 6, 0000};
char direccionesB[] = {1, 0, 1, 5, 5, 2, 4, 1, 1, 3, 1, 4, 2, 0, 2, 5, 6, 5, 7, 5, 4, 3, 1, 1, 3, 6, 2, 5, 6, 0, 1, 5, 0000};
char direccionesC[] = {6, 4, 4, 0, 7, 6, 1, 0, 3, 0, 7, 6, 0, 5, 7, 6, 5, 1, 5, 7, 0, 4, 1, 4, 3, 3, 3, 0, 6, 4, 3, 4, 0000};
char mascaras[] = {3, 3, 2, 3, 6, 1, 8, 5, 5, 9, 7, 7, 5, 5, 9, 0, 6, 5, 0, 7, 1, 9, 1, 7, 5, 0, 5, 5, 6, 7, 5, 2, 0000};

// masks list

int masks50[]={0x2379, 0x45AE, 0x1AAE, 0x75C2, 0x1B65, 0x13F4, 0xB545, 0xCC78, 0xA4E6, 0x1B17, 0xAA6A, 0xC3E8, 0x7895, 0x93AA, 0x395C, 0x5D2A, 
0xAC6C, 0x2AB9, 0x607E, 0x23E3, 0x4DB1, 0x84F3, 0x3B52, 0x0C5F, 0xA0DE, 0xE0DC, 0xC90F, 0x2DD4, 0xE712, 0x32E3, 0xD991, 0xCA1D, 
0xAB2A, 0x5663, 0x507D, 0xB562, 0xA4E3, 0x966C, 0x6AB4, 0xC6C5, 0xAC2D, 0x7CA1, 0x45B9, 0x077A, 0xBC15, 0xE1B8, 0xB2B1, 0x2BAC, 
0x1ED4, 0x3A2E, 0x8A2F, 0x7D44, 0x966C, 0xC593, 0xD8C3, 0x878B, 0x2B1D, 0xAD29, 0x39D2, 0x0EE3, 0xA0F9, 0x61C7, 0x68F4, 0xC7D0, 
0xE2A9, 0x49D6, 0xCB19, 0x52B5, 0x86F1, 0xA6C6, 0x9E54, 0xC2A7, 0x5E85, 0xAC2E, 0xE4D8, 0x2697, 0x48EE, 0xCE38, 0x9761, 0x12EE, 
0x478E, 0xD8B4, 0xE1D1, 0x80F7, 0xAAC6, 0x82BB, 0xBC94, 0xE159, 0xE619, 0xB0F1, 0x05EE, 0x1BE4, 0x69CA, 0xD43A, 0x709E, 0x96D1, 
0x1F49, 0x3AE8, 0xB465, 0x32E6, 0x74D2, 0xD668, 0xE31A, 0x9DC4, 0x3999, 0xEC34, 0x127E, 0x9734, 0x4D5A, 0x66B2, 0x8756, 0x13D9, 
0x9A96, 0x5595, 0x32DA, 0xD6A2, 0x51F2, 0x1B53, 0x2BA3, 0xE781, 0x6837, 0x0D9E, 0xCD85, 0xA5D8, 0x5783, 0x0F59, 0x9A33, 0x35AA, 
0x5197, 0xA9D1, 0xAD43, 0x6761, 0x8F25, 0x0FE2, 0x0F72, 0x19AB, 0xBC86, 0xB13A, 0xC5F0, 0x4CCE, 0xB0E3, 0x82D7, 0xE94C, 0xA03F, 
0xC535, 0xC43B, 0x6E19, 0x3F88, 0x51BC, 0x58BA, 0x28D7, 0x826F, 0x2E71, 0x4FC2, 0x331E, 0x7392, 0x8F8C, 0x0DD3, 0x7730, 0x311F, 
0x7057, 0x73B0, 0x2957, 0x1BF0, 0xFE80, 0x1A3E, 0xE4B4, 0x459E, 0x6B51, 0x9C63, 0x38AB, 0x7F10, 0x82ED, 0x62F2, 0x6917, 0x7E30, 
0x98D5, 0x2A3E, 0x62CE, 0xB187, 0x15CB, 0xEE0C, 0x19B6, 0x35D2, 0x7C51, 0x639A, 0xA969, 0xB1A3, 0x752C, 0xC2F2, 0x7326, 0x2976, 
0xEF02, 0xECC2, 0x5696, 0xAF44, 0x18DB, 0x893B, 0xA437, 0x6C56, 0xDAA2, 0x179C, 0x1E8D, 0x633C, 0xEA61, 0xE4E8, 0xF059, 0x6AA6, 
0x9639, 0x65A5, 0x41EB, 0xE722, 0x87E8, 0x1AB6, 0x10FB, 0xC91B, 0x0A6F, 0x22F6, 0xE466, 0x0F33, 0x9E46, 0x1ADC, 0x55B1, 0xA2AB, 
0x12FA, 0x5C39, 0xC8F2, 0x8AE9, 0xB193, 0x84EE, 0x993C, 0xE64A, 0x89F2, 0x966C, 0xC745, 0xA1E9, 0xA16E, 0xC4CB, 0x9566, 0x570E, 
0x037E, 0x36B4, 0x5B34, 0x30FC, 0x55A5, 0x61BA, 0x6A8D, 0xDE88, 0x43BA, 0x9A63, 0xB82D, 0x7D14, 0x65D2, 0x05DD, 0x413F, 0x89B9, 
0x702F, 0xE4F0, 0xB8A6, 0x593A, 0xDC58, 0xAC3C, 0x342F, 0x36F0, 0x8FA8, 0xCD58, 0x3C71, 0x15F8, 0x5A27, 0x62D5, 0xB4E8, 0xCB92, 
0x30EE, 0x8ACE, 0xA5AA, 0x19BC, 0xC69A, 0x566A, 0xB899, 0xA39A, 0x8CF1, 0x17D8, 0xB06E, 0x6B1A, 0xC5A9, 0x0CCF, 0xC9E1, 0x88FA, 
0x394B, 0x678A, 0x0F53, 0x1B4B, 0xF116, 0x9636, 0x31DC, 0xBA49, 0x6C1E, 0x3C72, 0x8E74, 0x2A3B, 0xCE26, 0x49BA, 0x47C3, 0x6695, 
0x7235, 0xBA8C, 0x4F51, 0xC45E, 0xC339, 0x8EC5, 0x49AD, 0x2769, 0x321F, 0x7253, 0xE471, 0xC9E4, 0xC8B3, 0xB3C4, 0xC751, 0x0DCE, 
0x7943, 0x519B, 0xCEB0, 0xF131, 0xC63A, 0xD961, 0x986D, 0x2DAC, 0xD383, 0x6F06, 0xB469, 0x92AB, 0x55B8, 0xA393, 0x5A53, 0xBD06, 
0x475A, 0xE92A, 0x4C5E, 0x4C57, 0xF449, 0x1F0B, 0x29CE, 0x9E52, 0x1DE2, 0xC47A, 0x6B62, 0x3D1A, 0xF930, 0xC0CF, 0xAA93, 0xD4A3, 
0x7169, 0x11D7, 0xD217, 0x8753, 0x8C5D, 0x3BA2, 0xDC98, 0x6751, 0x4DAA, 0xDD48, 0xB165, 0x3EA2, 0xB133, 0xFC28, 0x9555, 0x2F46, 
0x4BF0, 0x70DC, 0x1F51, 0x467A, 0xAE52, 0x2AF8, 0x0D4F, 0x34DC, 0xA49E, 0x389D, 0x1DD8, 0xA46D, 0xA956, 0xA62B, 0x6C8B, 0xECA1, 
0x339A, 0x3966, 0x91E5, 0xB076, 0xF149, 0x98DC, 0x9E45, 0xE075, 0xDB50, 0xE370, 0x91BA, 0x8A2F, 0x59D2, 0xCAB1, 0xB287, 0x0D9D, 
0xA9A9, 0xF4A8, 0x59D8, 0x9339, 0x2B65, 0xE98C, 0x5E43, 0x3ACC, 0x7CA8, 0x0A7D, 0xC999, 0x5972, 0x9E54, 0xB3A4, 0xFD80, 0xEC31, 
0x89F4, 0xA16B, 0x1AF1, 0xAAD1, 0x1F8A, 0xF164, 0xA783, 0xC9E8, 0xE43C, 0x50B7, 0x53AC, 0xF892, 0xAC6C, 0x7361, 0x4C37, 0x9CF0, 
0x8277, 0xB2D4, 0xA2B6, 0xE41B, 0x8EE2, 0xB4B1, 0xBE81, 0x323B, 0x2EE2, 0xD4A5, 0xA2BA, 0xE2CC, 0xB02F, 0xA64B, 0x6BC4, 0x7E11, 
0x199B, 0xD325, 0x8C5B, 0xB84B, 0x216F, 0xB4E1, 0xC678, 0xB155, 0x9C63, 0xC4F1, 0x3C99, 0x54DC, 0xC593, 0xE433, 0x48F9, 0x782D, 
0xBA25, 0xF704, 0x8F46, 0xB643, 0x2E55, 0x16EC, 0x396A, 0x591D, 0xA49D, 0x3593, 0xBD82, 0x4C3D, 0xBE44, 0xE856, 0x3DB0, 0x5972, 
0x234F, 0xDA51, 0x684F, 0x985B, 0x6CC5, 0x3663, 0x353C, 0x4755, 0x6969, 0xF885, 0x7AE0, 0xA0ED, 0x7C83, 0xA53A, 0x0ADE, 0x7D41, 
0x6A17, 0x1FC4, 0x9C72, 0x90EE, 0xE370, 0x3791, 0x654D, 0x89B9, 0x86F4, 0xCE15, 0x572C, 0x3F88, 0x0ADD, 0xB307, 0x467A, 0xF12C};


double iniciarArrays[]={ 0.009541551, 9.633681487, 0.103753895, 0.095688662, 0.073075995, -0.052410748, 0.125726634, 0.013420657, 3.885183983, -0.052941511, -0.09228065, 535004.2323,
0.009872718, 10.6810981, 0.090034401, 0.093470964, 0.072978902, -0.053237015, 0.121361911, 0.011485351, 4.14790915, -0.057378771, -0.109757185, 471041.0633,
0.010092813, 10.99507991, 0.10734383, 0.098593263, 0.069575347, -0.050348717, 0.118586835, 0.011658492, 4.232965864, -0.0543682, -0.090921771, 511568.1768,
0.009831615, 10.83409879, 0.102484815, 0.106347002, 0.073189046, -0.050247522, 0.114774976, 0.011568792, 4.122564121, -0.05751085, -0.109088552, 496481.0786,
0.010553404, 9.252785588, 0.09943176, 0.101721305, 0.070735473, -0.051074584, 0.124939117, 0.013495989, 3.63680944, -0.058161961, -0.098822673, 533084.0716,
0.010136859, 10.51251208, 0.108055609, 0.092183626, 0.067896152, -0.047022648, 0.122259214, 0.012787896, 4.056129095, -0.056163101, -0.090243702, 519670.4298,
0.009289368, 10.37124873, 0.104786713, 0.102334895, 0.069381645, -0.047349213, 0.127397964, 0.013380346, 4.1062455, -0.055623422, -0.098145913, 590825.6817,
0.009627938, 9.32459853, 0.107562872, 0.092668829, 0.068283435, -0.054555995, 0.115464078, 0.012700821, 3.684860816, -0.056863413, -0.094079443, 520503.1837,
0.010092949, 10.64375491, 0.09850351, 0.095936933, 0.065933165, -0.050777138, 0.115195073, 0.011808203, 4.188672266, -0.050205294, -0.091067438, 392665.1838,
0.009183814, 10.81506697, 0.103281567, 0.1024985, 0.074792218, -0.049229143, 0.115886789, 0.011805301, 3.820959878, -0.050243034, -0.097039613, 581433.862,
0.009811035, 10.88845364, 0.093258291, 0.094936298, 0.070590317, -0.050540365, 0.125333286, 0.012452946, 4.383373397, -0.060026925, -0.099194797, 500034.0235,
0.010050102, 10.48090882, 0.090578593, 0.10772446, 0.067419006, -0.0544008, 0.118335567, 0.011936408, 4.040041594, -0.055315779, -0.101197054, 476928.2701,
0.010907684, 10.98966746, 0.09870387, 0.106796044, 0.068807502, -0.050555407, 0.13717292, 0.011487349, 3.880297393, -0.057658678, -0.10737478, 466685.5439,
0.00983243, 10.51164747, 0.106468482, 0.10985257, 0.067336069, -0.045640932, 0.130970804, 0.013526351, 4.36899339, -0.057401626, -0.090844799, 501258.1555,
0.010201755, 10.99369138, 0.099921841, 0.09212326, 0.076294305, -0.046836736, 0.113710427, 0.012955134, 3.737941997, -0.053414466, -0.106406068, 542010.4213,
0.010372675, 9.680667902, 0.099002725, 0.0981387, 0.075543027, -0.050482206, 0.128160054, 0.01319843, 4.09973875, -0.060274829, -0.097016151, 559478.8915,
0.010471114, 10.82854971, 0.101780021, 0.101185394, 0.072074262, -0.046682025, 0.128317231, 0.012208412, 3.698421819, -0.055525213, -0.109907292, 554540.8803,
0.010566464, 10.42170603, 0.09065606, 0.096482986, 0.066356915, -0.04966616, 0.114741361, 0.01323328, 4.024035909, -0.053675228, -0.097763286, 398293.5131,
0.009388988, 9.945887851, 0.104170072, 0.100492514, 0.074477851, -0.048738027, 0.131331597, 0.012010898, 3.832877424, -0.051319148, -0.091117008, 577384.3728,
0.010007996, 10.05798179, 0.104716113, 0.109742267, 0.068655927, -0.046060231, 0.120105548, 0.012224925, 4.262847456, -0.053051466, -0.097825021, 458646.672,
0.010976108, 10.55690161, 0.096996741, 0.106427429, 0.074933051, -0.045665378, 0.128072791, 0.011515861, 3.820816799, -0.056868568, -0.093126751, 508054.8273,
0.009140302, 9.54577424, 0.090404202, 0.10604453, 0.066863565, -0.049366576, 0.127670889, 0.011989733, 3.859585412, -0.052569921, -0.107659288, 483498.0374,
0.010325057, 9.541503816, 0.094884728, 0.104918502, 0.069163436, -0.050248563, 0.137267414, 0.013436103, 3.617701181, -0.057200183, -0.096501725, 519141.3156,
0.009568738, 9.211070957, 0.095622864, 0.09693754, 0.063861249, -0.048495662, 0.135669377, 0.013095206, 3.807274966, -0.053311394, -0.109072029, 499494.1723,
0.010646343, 10.42419737, 0.100101603, 0.098633451, 0.064257605, -0.045639336, 0.135899455, 0.012437825, 3.714658367, -0.055020749, -0.106303749, 497390.4182,
0.00952893, 10.37676117, 0.10701008, 0.098629749, 0.06489556, -0.048797592, 0.11629171, 0.01248229, 4.244783853, -0.060865745, -0.108191182, 566803.948,
0.010789163, 10.81147438, 0.093122523, 0.092203117, 0.064946334, -0.052037469, 0.136661478, 0.013239763, 3.990802275, -0.055359948, -0.108000834, 408623.2376,
0.010316173, 9.390568972, 0.105855247, 0.099433505, 0.075293103, -0.054933728, 0.133446915, 0.01299907, 4.032576155, -0.051660212, -0.102374635, 502706.9366,
0.010687938, 9.749261984, 0.10057074, 0.10156502, 0.07077533, -0.053323836, 0.132508035, 0.012385294, 3.889428765, -0.057814843, -0.104922496, 506841.3367,
0.010145608, 9.95439625, 0.100330546, 0.09029032, 0.074808692, -0.046002657, 0.122929963, 0.013684302, 3.683154827, -0.050508131, -0.099152883, 510344.8665,
0.009238012, 10.35386689, 0.093149822, 0.092849184, 0.074921281, -0.050807329, 0.126845879, 0.011943323, 3.826065241, -0.056156204, -0.092323561, 568500.2462,
0.010185983, 10.13878229, 0.094391082, 0.109244122, 0.063651802, -0.050083732, 0.119063999, 0.012513355, 4.013307682, -0.057237323, -0.103056375, 464171.6235,
0.009550885, 9.28181094, 0.098757847, 0.090199642, 0.075042366, -0.054531444, 0.112940515, 0.013094748, 4.343218308, -0.060002635, -0.109176965, 550862.0443,
0.01026167, 9.028066712, 0.106606067, 0.093582646, 0.070397882, -0.053411969, 0.136689296, 0.013567328, 4.030626163, -0.059494095, -0.101695729, 489008.5848,
0.010306827, 10.36814722, 0.098364922, 0.101607846, 0.065421571, -0.048842176, 0.125044142, 0.012121504, 3.988410155, -0.058712139, -0.100380923, 482974.7405,
0.009597217, 9.129203951, 0.104823028, 0.09544899, 0.06760296, -0.051691142, 0.114466812, 0.013283713, 3.97598172, -0.057518469, -0.097063671, 539272.1235,
0.009792872, 9.846552753, 0.103199141, 0.104709473, 0.071045632, -0.047523998, 0.133260037, 0.012106663, 4.343723834, -0.051193733, -0.09076955, 468365.5306,
0.009549786, 9.83747986, 0.105319088, 0.100229966, 0.075046131, -0.047844915, 0.11931415, 0.011706771, 3.728397989, -0.054832458, -0.099622075, 593242.8677,
0.009693258, 10.86233626, 0.091351594, 0.095486436, 0.063341219, -0.047349782, 0.117607908, 0.012262683, 4.397486256, -0.051160986, -0.10063848, 427514.8278,
0.009119807, 9.036648494, 0.100234208, 0.103914983, 0.065695756, -0.054378337, 0.135380739, 0.01278723, 3.753629705, -0.05440182, -0.107518958, 540337.325,
0.009160745, 9.801191153, 0.09187636, 0.108010382, 0.069957982, -0.051906728, 0.130642541, 0.013117419, 3.650696756, -0.052034159, -0.093702558, 495581.9105,
0.009507637, 10.88734934, 0.105356496, 0.105632629, 0.063470834, -0.045582153, 0.126101219, 0.011869591, 4.002349835, -0.059061787, -0.099086651, 592427.345,
0.009076399, 9.009223371, 0.104316962, 0.09716176, 0.073569886, -0.047716724, 0.134691641, 0.011305557, 4.154233239, -0.053927027, -0.10088515, 590012.191,
0.009605552, 9.652686748, 0.098050733, 0.09015289, 0.065842619, -0.050922996, 0.11902958, 0.012206945, 3.935755459, -0.051222466, -0.10170758, 474638.3605,
0.01020701, 10.34466268, 0.100753242, 0.090957444, 0.064347039, -0.050936764, 0.114280402, 0.0123308, 3.926515193, -0.054311244, -0.109982948, 471122.837,
0.009821723, 9.650500084, 0.098030142, 0.099210269, 0.076092387, -0.050695287, 0.135955719, 0.013145057, 3.758921564, -0.053473253, -0.102624661, 550342.035,
0.009603358, 9.56654595, 0.107877982, 0.102793048, 0.064881709, -0.05467181, 0.123318619, 0.011941307, 4.139844262, -0.054521946, -0.109298884, 482612.5953,
0.009214479, 10.72766524, 0.103720396, 0.101215519, 0.07573326, -0.045724259, 0.120568687, 0.012142925, 3.687746026, -0.050113609, -0.100534586, 604122.2181,
0.010319762, 9.837347429, 0.09161031, 0.0929164, 0.063812821, -0.052956656, 0.135337723, 0.01159192, 4.071166009, -0.061061555, -0.102573885, 467229.009,
0.010965853, 9.717435944, 0.109795311, 0.106798162, 0.064682978, -0.045930035, 0.117082204, 0.012978586, 4.189654822, -0.058749093, -0.10194283, 440700.9544,
0.009853532, 10.66993517, 0.100269685, 0.097798189, 0.074274011, -0.047784788, 0.114863498, 0.011312048, 4.394296389, -0.060369885, -0.097125306, 573012.0416,
0.009597842, 10.84486046, 0.100378389, 0.09166804, 0.076303331, -0.049035064, 0.136614626, 0.013077606, 4.24899047, -0.055039529, -0.102837387, 539061.113,
0.010374982, 10.12378636, 0.106865256, 0.093222727, 0.075883932, -0.054025095, 0.123050953, 0.012984718, 4.08131016, -0.056251473, -0.106965192, 522493.2891,
0.009956557, 9.150407738, 0.097115732, 0.098340923, 0.069911056, -0.047882896, 0.131328272, 0.012436381, 3.610776808, -0.056774719, -0.091381678, 548903.6289,
0.009560947, 9.200843773, 0.096181095, 0.101392341, 0.06939007, -0.048519996, 0.129473232, 0.01160161, 4.242774691, -0.051146097, -0.100565312, 452843.9909,
0.009885335, 9.870374818, 0.100784904, 0.109349024, 0.071706378, -0.054477318, 0.133347244, 0.012868626, 3.952517579, -0.05779844, -0.102199749, 517527.985,
0.009732898, 9.059161523, 0.101241186, 0.106604524, 0.068850123, -0.05145423, 0.130416743, 0.013341527, 4.156746649, -0.0535347, -0.097847926, 457566.5941,
0.010719557, 10.02577181, 0.093150084, 0.098260292, 0.06384549, -0.053360238, 0.115043637, 0.013169897, 4.39295327, -0.052937069, -0.091944625, 418662.0175,
0.010722102, 10.06045469, 0.105168578, 0.101355333, 0.066663829, -0.046995819, 0.11557817, 0.013066509, 4.212389761, -0.054306124, -0.092631561, 414353.1254,
0.009014687, 9.405772586, 0.107159235, 0.098873723, 0.068454241, -0.054915753, 0.121221735, 0.011862218, 3.704140732, -0.059474444, -0.095471868, 568814.1185,
0.009231974, 10.49749881, 0.108053801, 0.097036781, 0.063286783, -0.051526109, 0.118329356, 0.012462168, 4.388408242, -0.050477933, -0.099346199, 440240.3361,
0.010111504, 10.51783158, 0.099563807, 0.093987177, 0.076514196, -0.049958962, 0.137424962, 0.012857466, 3.849423183, -0.05732967, -0.092099568, 525893.2499,
0.010972194, 9.215773994, 0.09130388, 0.10856944, 0.06498089, -0.048771419, 0.133488242, 0.011724895, 3.710686961, -0.054620961, -0.097507673, 431942.6315,
0.010694632, 9.549907873, 0.10472536, 0.091044373, 0.071219175, -0.050038909, 0.123864087, 0.011853304, 3.799268041, -0.057775831, -0.090499467, 506998.2673};

// lower and upper limits for each dependent variable
double limites[]={0.007053266, 0.012937529, 7.023366832, 12.98093645, 0.070273491, 0.129556221, 0.07045321, 0.12955225, 0.05005937, 0.089741609, -0.064285303, -0.036230578, 0.088456068, 0.161909409, 0.008926812, 0.016063047, 2.82406736, 5.184195704, -0.072009501, -0.039165663, -0.129722194, -0.070504456};



SC_MODULE (control) {
public:
	sc_in_clk			clk;
	sc_in<bool>			rst;

	sc_out<sc_uint<NVARS>> maskAB, maskC; 
	sc_out<sc_uint<addrBits>> addrA, addrB, addrC;
	sc_out<bool> validInitMemArray, validInitLimits, validInitReferences;
	sc_out<bool> validAddr1[nISLAS], validAddr2[nISLAS];

	sc_out<double>	initValue;		
	sc_in<bool>		avanzaGuardar;


void regs() {

	double *dVal; 
	unsigned long long bits64; 
	sc_uint<nISLAS> tmpVal1, tmpVal2; 
	int aleatorio; 

	dVal = (double*)(&bits64);

	if (rst.read()) {
		estado = 0;
		ct1 = ct2 = val = 0; 
		validInitMemArray.write(false);
		validInitLimits.write(false);
		for (int i = 0; i < nISLAS; ++i) {
			validAddr1[i].write(false);
			validAddr2[i].write(false);
		}
		for (int i = 0; i < LAT_HIB_1; ++i) 
			delayValid[i] = false; 

		return;
	}
	
	switch (estado) {
	case 0:		// initializing memArrays (initial values of independent variables)
		if ((ct1 % 12) == 11) {
			initValue.write(iniciarArrays[ct1] / 625);	// error (cost) was initially obtained for 625 points, normalized cost will later be sent to the assessment module
			printf("%.4lf \n", iniciarArrays[ct1] / 625);	// QQQ
		}
		else {
			initValue.write(iniciarArrays[ct1]);	// initializing with real data (actually, deviations of the knwon solution). 
			printf("%.4lf ", iniciarArrays[ct1] );	// QQQ
		}


		validInitMemArray.write(true);
		++ct1;
		if (ct1 == (NSOL * nISLAS * (NVARS + 1))) {
			ct1 = 0;
			estado = 1; 
		}
		break; 
	case 1:		// initializing the upper and lower limits (bounds) 
		validInitMemArray.write(false);
		validInitLimits.write(true);
		initValue.write(limites[ct1]);
		++ct1;
		if (ct1 == (2* NVARS)) {
			ct1 = 0;
			estado = 2;
		}
		break; 
	case 2:		// initializing the references for cost assessment
		validInitLimits.write(false);
		validInitReferences.write(true);
		initValue.write(REF[ct1]); 
		++ct1;
		if (ct1 == nPOINTS) {
			ct1 = 0;
			estado = 3;
		}
		break;
	case 3:		// normal operation, issuing addresses for A and B (and C with a delay) plus a hybridization mask
		validInitReferences.write(false);
		tmpVal1 = tmpVal2 = 0; 
		for (int i = 0; i < nISLAS; ++i) {
			validAddr1[i].write(false);
			validAddr2[i].write(false);
		}
		if(ct2<(NSOL*nISLAS)){
			if(delayValid[LAT_HIB_1-1]){
				validAddr2[ct2 % nISLAS].write(true);
				tmpVal2.bit(ct2 % nISLAS) = true; 
				aleatorio = rand() % NSOL;
				addrC.write( aleatorio );
				maskC.write(masks50[ct2] & rand() & maskBits);
				++ct2; 
			}
		}else
			estado = 4;
		if ((ct1 >= 512) || (ct2 >= 512))
			ct1 = ct1; 

		for(int i=(LAT_HIB_1-1); i>0; i--)
			delayValid[i] = delayValid[i-1];

		if(ct1<(NSOL*nISLAS)){
			validAddr1[ct1 % nISLAS].write(true);
			tmpVal1.bit(ct1 % nISLAS) = true;
			aleatorio = rand() % NSOL;
			addrA.write(aleatorio);
			aleatorio = rand() % NSOL;
			addrB.write(aleatorio);
			maskAB.write(masks50[ct1] & rand() & maskBits);
			delayValid[0] = true; 
			++ct1;
		}else
			delayValid[0] = false; 
		break;
	case 4:	// an iteration has ended, now we wait for the same cost-result to be issued
		ct1 = 0; 
		ct2 = 0; 
		if(avanzaGuardar.read())
			estado = 5; 
		break; 
	case 5: // waiting for the first cycle without a cost-result being issued
		if (avanzaGuardar.read() == false)
			estado = 3;
		break; 
	default: 
		ct1 = 0; 
		ct2 = 0; 
	};

}

SC_CTOR(control) {
	  
	cout << "control: " << name() << endl;

	maskBits = (1<<NVARS)-1; 

	SC_METHOD(regs);
	sensitive << clk.pos();

  }

private:

	int estado; 
	int maskBits; 
	int ct1, ct2; 
	int val; 
	bool delayValid[LAT_HIB_1];	// implements the delay for sending the 3rd address


}; 

#endif;. 